name: Dependabot auto-merge

on:
  workflow_call:
    inputs: {}

env:
  CONFIG_FILE: .github/auto-merge.json

jobs:
  dependabot:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.event.pull_request.user.login == 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v4
      - uses: octo-sts/action@e480437973a6f6ac2e9caa40ecabedc870d76395 # v1.0.1
        id: octo-sts
        with:
            scope: ${{ github.repository }}
            identity: auto-update
      - name: Dependabot metadata
        id: dependabot-metadata
        uses: dependabot/fetch-metadata@v2
      - name: Read configfile
        id: read-configfile
        uses: actions/github-script@v8
        env:
            DEPENDENCY_NAMES: ${{steps.dependabot-metadata.outputs.dependency-names}}
            UPDATE_TYPE: ${{steps.dependabot-metadata.outputs.update-type}}
            PACKAGE_ECOSYSTEM: ${{steps.dependabot-metadata.outputs.package-ecosystem}}
        with:
          script: |
            const fs = require('fs');
            const { DEPENDENCY_NAMES, UPDATE_TYPE, CONFIG_FILE, PACKAGE_ECOSYSTEM } = process.env;
            const dependencyNames = DEPENDENCY_NAMES?.split();
            console.log({ dependencyNames, UPDATE_TYPE, PACKAGE_ECOSYSTEM })
                        
            // [{ match: { dependency_name: "..", update_type: "semver:.."}}]
            const data = fs.readFileSync(CONFIG_FILE, 'utf8');
            if (!data) return false;
            let json;
            try {
              json = JSON.parse(data);
            } catch (e) {
              console.error('Failed to parse configfile ' + CONFIG_FILE);
              throw e;
            }
            
            // Set this to true if we find a matching dependency update
            const shouldMerge = !!json?.some(({ match }) => {
                if (!dependencyNames?.includes(match?.dependency_name) && !(PACKAGE_ECOSYSTEM?.includes(match?.package_ecosystem))) return false;
                switch (match?.update_type) {
                  // Fallthrough until we hit a result. Major also matches minor and so on.
                  case 'semver:major': if (UPDATE_TYPE === 'version-update:semver-major') return true;
                  case 'semver:minor': if (UPDATE_TYPE === 'version-update:semver-minor') return true;
                  case 'semver:patch': if (UPDATE_TYPE === 'version-update:semver-patch') return true;
                  default: return false;
                }
            });

            console.log({ shouldMerge });
            return shouldMerge;

      - name: Enable auto-merge for Dependabot PRs
        if: ${{fromJSON(steps.read-configfile.outputs.result)}}
        run: |
          set -e
          sleep 10
          
          echo "Check if PR is mergeable..."
          mergeable=$(gh pr view "$PR_URL" --json mergeable --jq '.mergeable')
  
          case "$mergeable" in
            MERGEABLE)
              echo "‚úÖ No merge conflicts."
              ;;
            CONFLICTING)
              echo "‚ùå Merge conflicts detected."
              exit 1
              ;;
            *)
              echo "‚ùì Unexpected mergeable value: $mergeable"
              exit 1
              ;;
          esac
  
          echo "Waiting for all checks to complete..."

          while true; do
            # Get all check runs excluding "Dependabot auto-merge"
            checks=$(gh pr checks "$PR_URL" --json workflow,state --jq '[.[] | select(.workflow != "Dependabot auto-merge")]')
          
            # Extract all states
            states=$(echo "$checks" | jq -r '.[].state')
          
            echo "Current check states: $states"
          
            if echo "$states" | grep -q 'FAILURE'; then
              echo "‚ùå One or more checks failed."
              exit 1
            fi
          
            if echo "$states" | grep -Eq 'PENDING|IN_PROGRESS|QUEUED'; then
              echo "üîÑ Checks still running. Sleeping 10s..."
              sleep 10
              continue
            fi
          
            if echo "$states" | grep -Ev '^(SUCCESS|SKIPPED|NEUTRAL)$' | grep -q .; then
              echo "‚ö†Ô∏è Unknown or unexpected check state detected. Failing."
              exit 1
            fi
          
            echo "‚úÖ All checks succeeded."
            break
          done
          
          echo "Checking if any terraform changes are present..."
          tf_bot_commented_changes=$(gh pr view "$PR_URL" --json comments \
              --jq '.comments
                    | map(select(.author.login == "github-actions"))
                    | last.body // ""
                    | contains("Changes detected.")')
            
          echo "Terraform changes detected: $tf_bot_commented_changes"
          
          if [[ "$tf_bot_commented_changes" == "true" ]]; then
            echo "‚ùå Changes detected in Terraform plan. Aborting merge."
            exit 1
          else
            echo "‚úÖ No changes detected. Proceeding."
          fi
          
          echo "Approving PR..."
          gh pr review --approve -b "Dependency matches pattern found in auto-merge config, merging" "$PR_URL"
      
          echo "Attempting to merge directly..."
          if ! gh pr merge --admin --merge "$PR_URL"; then
            echo "Direct merge failed ‚Äî adding to merge queue instead..."
            gh pr merge --merge "$PR_URL"
          fi
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GH_TOKEN: ${{ steps.octo-sts.outputs.token }}
