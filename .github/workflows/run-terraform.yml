name: Run Terraform

on:
  workflow_call:
    inputs:
      workload_identity_provider:
        description: "The ID of the provider to use for authentication. It should be in the format of `projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers/{{workload_identity_pool_provider_id}}`"
        required: true
        type: string
      service_account:
        description: "The GCP service account connected to the identity pool that will be used by Terraform"
        required: true
        type: string
      runner:
        description: "The GitHub runner to use when running the deploy. This can for example be `atkv1-dev`"
        required: true
        type: string
      deploy_on:
        description: "Which branch will be the only branch allowed to deploy. This defaults to the main branch so that other branches only run check and plan. Defaults to `refs/heads/main`"
        required: false
        type: string
        default: 'refs/heads/main'
      working_directory:
        description: "The directory in which to run terraform, i.e. where the Terraform files are placed. The path is relative to the root of the repository"
        required: false
        type: string
        default: "."
      project_id:
        description: "The GCP Project ID to use as the \"active project\" when running Terraform. When deploying to Kubernetes, this must match the project in which the Kubernetes cluster is registered"
        required: false
        type: string
      environment:
        description: "The GitHub environment to use when deploying. See [using environments for deployment](https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment) for more info on this"
        required: false
        type: string
      kubernetes_cluster:
        description: "An optional kubernetes cluster to authenticate to. Note that the project_id must match where the cluster is registered"
        required: false
        type: string
      terraform_workspace:
        description: "When provided will set a workspace as the active workspace when planning and deploying"
        required: false
        type: string
      terraform_options:
        description: "Any additional terraform options to be passed to plan and apply. For example `-var-file=dev.tfvars` and `-var=<variableName>=<variableValue>`"
        required: false
        type: string
      terraform_backend_config:
        description: "Any additional terraform backend-config to be passed to init. For example `-backend-config=dev.gcs.tfbackend`"
        required: false
        type: string
      vault_role:
        description: "Required when using vault in terraform. Enables fetching jwt and logging in to vault for the terraform provider to work"
        required: false
        type: string
      image_url:
        description: "Setting an image_url of the form registry/repository:tag or registry/repository@digest enables the binary attestation of that image."
        required: false
        type: string
        default: ''
      add_comment_on_pr:
        description: "Setting this to `false` disables the creation of comments with info of the Terraform run on Pull Requests. When `true` the `pull-request` permission is required to be set to `write`. Defaults to `true`"
        required: false
        type: boolean
        default: true
      destroy:
        description: "An optional boolean which runs terraform destroy when set to true. Defaluts to false"
        required: false
        type: boolean
        default: false

jobs:
  terraform_check:
    name: Terraform Validate
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    outputs:
      validate_outcome: ${{ steps.validate.outcome }}
      validate_stdout: ${{ steps.validate.outputs.stdout}}
      format_outcome: ${{ steps.format.outcome }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
        project_id: ${{ inputs.project_id }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      id: validate
      continue-on-error: true
      run: |
        echo 'Run validate' | tee $GITHUB_STEP_SUMMARY
        terraform validate -no-color | tee -a output.txt
        cat output.txt | sed '/^::/d' >> $GITHUB_STEP_SUMMARY

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: |
        echo 'Run format check' | tee -a $GITHUB_STEP_SUMMARY
        terraform fmt -check -no-color || { echo '
        FAILURE! The above files are not properly formatted.
        Run `terraform fmt` in ${{ inputs.working_directory }}, commit the changed files and push to fix the issue' | tee -a $GITHUB_STEP_SUMMARY ; exit 1; }

  terraform_plan:
    name: Terraform Plan
    runs-on: ${{ inputs.runner }}

    # Disallow parallel jobs for same env to allow aquiring state lock instead of crashing
    concurrency: ${{ inputs.environment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    outputs:
      init_outcome: ${{ steps.init.outcome }}
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}
      plan_outcome: ${{ steps.plan.outcome }}
      plan_stdout: ${{ steps.plan.outputs.stdout }}
    
    env:
      # makes some minor adjustments to Terraforms output to de-emphasize specific commands to run
      TF_IN_AUTOMATION: true
      TF_WORKSPACE: ${{ inputs.terraform_workspace }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Node is required for terraform_wrapper on-prem
    - uses: actions/setup-node@v3
      with:
        node-version: 16

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      # Change to v2.1.0 when released. We require the below fix:
      # https://github.com/hashicorp/setup-terraform/pull/125
      uses: hashicorp/setup-terraform@78ea3ac2fbe8fe4dab277d1cbd1e6435a91a49cc

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
        project_id: ${{ inputs.project_id }}

    - name: Authenticate with Kubernetes
      if: inputs.kubernetes_cluster != ''
      run: gcloud container hub memberships get-credentials ${{ inputs.kubernetes_cluster }} --verbosity debug

    - name: Authenticate with Vault
      if: inputs.vault_role != ''
      uses: kartverket/vault-jwt-auth-action@v2
      with:
        vaultaddr: 'https://vault.${{ inputs.environment }}.skip.statkart.no'
        path: jwt-${{ inputs.environment }}
        role: ${{ inputs.vault_role }}
        certb64: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURoakNDQW02Z0F3SUJBZ0lRSHhRNCszNDQ1TFJDazN6ZlVUUENPekFOQmdrcWhraUc5dzBCQVFzRkFEQkwKTVJJd0VBWUtDWkltaVpQeUxHUUJHUllDYm04eEdEQVdCZ29Ka2lhSmsvSXNaQUVaRmdoemRHRjBhMkZ5ZERFYgpNQmtHQTFVRUF4TVNTMkZ5ZEhabGNtdGxkQ0JTYjI5MElFTkJNQjRYRFRFMk1ETXlNakUwTURJek0xb1hEVFEyCk1ETXlNakUwTVRJek0xb3dTekVTTUJBR0NnbVNKb21UOGl4a0FSa1dBbTV2TVJnd0ZnWUtDWkltaVpQeUxHUUIKR1JZSWMzUmhkR3RoY25ReEd6QVpCZ05WQkFNVEVrdGhjblIyWlhKclpYUWdVbTl2ZENCRFFUQ0NBU0l3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFKSjBaMWExNEpYblkxSUptaDgweGgwSFhKZmZZZ2lXCjVFRGtxOUVFUXRPYk1SUlVDbm16aUlDQ3lPM3hLQUdqWEJ1aFowL21vVUJnUXFwbWtDSlIvQ1pubnNJMVZ6QVkKMHNPbWlRaFVNSVdCUzhDRkltVWNoTmJOREM1SzZYVStwNGZodWxFN0lPL3FTZDd3V2dNSFZLdUE5eVBvVFJsMwowaVpZdG5IcUlCb3dZS3dJVHBBSmpwME5hTmNIalY2TWVOdlBrR1RURk45S1MxcG53QjhZVnFVYUZXdDJGVDh1CjBSTE9kUUgyeFFva1l4YW1RRWNqaEFBSnlzVDdkK25YemRzYUEwYXQrYlNwUExxTURVOW5JZFpuRGc1TlgyY0oKcnNlRm5tWTJ3Q2NLL2tMUUpVSWxSQVQ0UHI5Y08rZDRvSytRTFFOaGZpVmxUa0RaZU1ISHhia0NBd0VBQWFObQpNR1F3RXdZSkt3WUJCQUdDTnhRQ0JBWWVCQUJEQUVFd0N3WURWUjBQQkFRREFnR0dNQThHQTFVZEV3RUIvd1FGCk1BTUJBZjh3SFFZRFZSME9CQllFRk5xNUhyME9mV3kzbWMvckxXUEZrMHpmSWhlck1CQUdDU3NHQVFRQmdqY1YKQVFRREFnRUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJkdHFVbDdvWFFTYWxIWjh6Y2dRZllvZWVxTGNwRQp5RjhFUngwdnFQc0hmY2VnL0ZXZEhFUVh4TWtPN1JER1Fzb2NmTVZvR0FBT1R3VlFPTHZCNmg4MnhCRVozSjBqCjBGMWkvcSs0WEd2NjdvOW43Z2NLNUFGOVNhcy9MVFB4N3dqQjV2dS85TkxyRkE1eXgyUG1iRnpNNFZRcXkwZnQKd2loaTdxMlhoQlVYUGo0SEdhTVE2aE1CYkRhSVl0Z0ovWWlkTFpSeGZWQVpGVEN4UDlPcDZVR3d0Zi9DeHdPSQo5ZkxtaWIwUDZCWG9sR3h1eU5XdHU2K0Vxc1JtMGtvcE5jcDkyZWpiOGsyb3R4VWdRcGNoVzRwd2RLMWZ3azhECndVblY5emhTc2k5eVZGMVVRUDZRcEJCeFNDZE5PT3JSSEg0N1djZmF0VUg0SWhuQW9PS0VyUVpBCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init ${{ inputs.terraform_backend_config }}

    - name: Terraform Plan
      id: plan
      run: |
        # 1. Run and send stdout to build log as usual
        terraform plan ${{ inputs.terraform_options }} -input=false -no-color -detailed-exitcode -out=plan-${{ inputs.environment }}.tfplan | tee output.txt

        # 2. Remove some github commands and fluff
        STDOUT="$(sed '/^::/d' output.txt | grep -v 'Refreshing state...')"

        # 3. Write to step summary
        cat >> $GITHUB_STEP_SUMMARY <<EOF
        \`\`\`
        ${STDOUT}
        \`\`\`
        EOF

        # 4. Serialize into single-line string for transfer using outputs that only support single line
        STDOUT="${STDOUT//'%'/'%25'}"
        STDOUT="${STDOUT//$'\n'/'%0A'}"
        STDOUT="${STDOUT//$'\r'/'%0D'}"

        # 5. Write output 
        echo "::set-output name=stdout::$STDOUT"

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: plan-${{ inputs.environment }}.tfplan
        path: ${{ inputs.working_directory }}/plan-${{ inputs.environment }}.tfplan
        retention-days: 5

  update_github:
    if: ${{ always() && inputs.add_comment_on_pr == true && github.event_name == 'pull_request' }}
    needs: [terraform_check, terraform_plan]
    name: Update GitHub
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Update Pull Request
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          /* Body is in the format of
          * <!-- @run-terraform -->
          * <!-- @run-terraform:start:jobid -->
          * Output of job with id jobid
          * <!-- @run-terraform:end:jobid -->
          */
          const bodyStartMarker = '<!-- @run-terraform -->';
          const comment = comments.find(({ body }) => body.startsWith(bodyStartMarker));
          const id = comment?.id;
          let commentBody = comment?.body ?? bodyStartMarker;
          const bodyHasJobInfo = commentBody.includes('<!-- @run-terraform:start:${{ inputs.environment }} -->');

          const exitcode = '${{ needs.terraform_plan.outputs.plan_exitcode }}';
          const action = {
            0: 'No changes detected. Will not run Terraform apply job',
            1: 'An error occured! Will not run Terraform apply job',
            2: 'Changes detected. Will run Terraform apply job on merge to ${{ inputs.deploy_on }}'
          }[exitcode] ?? 'Terraform gave an unknown exit code, I don\'t know what happens next!';
          
          const jobBody = `<!-- @run-terraform:start:${{ inputs.environment }} -->
          ## Results for ${{ inputs.environment }} ${exitcode === '2' ? '– ❗ `CHANGED` ❗' : ''}
          #### Terraform Format and Style 🖌 \`${{ needs.terraform_check.outputs.format_outcome }}\`
          #### Terraform Initialization ⚙️ \`${{ needs.terraform_plan.outputs.init_outcome }}\`
          #### Terraform Validation 🤖 \`${{ needs.terraform_check.outputs.validate_outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ needs.terraform_check.outputs.validate_stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖 \`${{ needs.terraform_plan.outputs.plan_outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${{ needs.terraform_plan.outputs.plan_stdout }}
          \`\`\`
          
          </details>

          #### Next action 🚀
          ${action}
          
          *Pusher: @${{ github.actor }}, Working Directory: \`${{ inputs.working_directory }}\`, Commit: ${{ github.sha }}, Generated at: \`${new Date().toLocaleString('nb')}\`*
          <!-- @run-terraform:end:${{ inputs.environment }} -->`;

          if (bodyHasJobInfo) {
            commentBody = commentBody.replace(
              /<!-- @run-terraform:start:${{ inputs.environment }} -->.*<!-- @run-terraform:end:${{ inputs.environment }} -->/s,
              jobBody,
            );
          } else {
            commentBody += '\n' + jobBody;
          }

          if (id) {
            github.rest.issues.updateComment({
              comment_id: id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })
          }

  run_terraform:
    # TODO We need to verify that inputs.deploy_on actually works. Seems to only work on main atm
    needs: [terraform_check, terraform_plan]
    if: github.ref == inputs.deploy_on && github.event_name == 'push' && (needs.terraform_plan.outputs.plan_exitcode == '2' || inputs.destroy == true)
    name: Terraform Apply or Destroy
    runs-on: ${{ inputs.runner }}
    environment: ${{ inputs.environment }}

    # Disallow parallel jobs for same env to allow aquiring state lock instead of crashing
    concurrency: ${{ inputs.environment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    env:
      # makes some minor adjustments to Terraforms output to de-emphasize specific commands to run
      TF_IN_AUTOMATION: true
      TF_WORKSPACE: ${{ inputs.terraform_workspace }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
        project_id: ${{ inputs.project_id }}

    - name: Authenticate with Kubernetes
      if: inputs.kubernetes_cluster != ''
      run: gcloud container hub memberships get-credentials ${{ inputs.kubernetes_cluster }} --verbosity debug

    - name: Authenticate with Vault
      if: inputs.vault_role != ''
      uses: kartverket/vault-jwt-auth-action@v2
      with:
        vaultaddr: 'https://vault.${{ inputs.environment }}.skip.statkart.no'
        path: jwt-${{ inputs.environment }}
        role: ${{ inputs.vault_role }}
        certb64: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURoakNDQW02Z0F3SUJBZ0lRSHhRNCszNDQ1TFJDazN6ZlVUUENPekFOQmdrcWhraUc5dzBCQVFzRkFEQkwKTVJJd0VBWUtDWkltaVpQeUxHUUJHUllDYm04eEdEQVdCZ29Ka2lhSmsvSXNaQUVaRmdoemRHRjBhMkZ5ZERFYgpNQmtHQTFVRUF4TVNTMkZ5ZEhabGNtdGxkQ0JTYjI5MElFTkJNQjRYRFRFMk1ETXlNakUwTURJek0xb1hEVFEyCk1ETXlNakUwTVRJek0xb3dTekVTTUJBR0NnbVNKb21UOGl4a0FSa1dBbTV2TVJnd0ZnWUtDWkltaVpQeUxHUUIKR1JZSWMzUmhkR3RoY25ReEd6QVpCZ05WQkFNVEVrdGhjblIyWlhKclpYUWdVbTl2ZENCRFFUQ0NBU0l3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFKSjBaMWExNEpYblkxSUptaDgweGgwSFhKZmZZZ2lXCjVFRGtxOUVFUXRPYk1SUlVDbm16aUlDQ3lPM3hLQUdqWEJ1aFowL21vVUJnUXFwbWtDSlIvQ1pubnNJMVZ6QVkKMHNPbWlRaFVNSVdCUzhDRkltVWNoTmJOREM1SzZYVStwNGZodWxFN0lPL3FTZDd3V2dNSFZLdUE5eVBvVFJsMwowaVpZdG5IcUlCb3dZS3dJVHBBSmpwME5hTmNIalY2TWVOdlBrR1RURk45S1MxcG53QjhZVnFVYUZXdDJGVDh1CjBSTE9kUUgyeFFva1l4YW1RRWNqaEFBSnlzVDdkK25YemRzYUEwYXQrYlNwUExxTURVOW5JZFpuRGc1TlgyY0oKcnNlRm5tWTJ3Q2NLL2tMUUpVSWxSQVQ0UHI5Y08rZDRvSytRTFFOaGZpVmxUa0RaZU1ISHhia0NBd0VBQWFObQpNR1F3RXdZSkt3WUJCQUdDTnhRQ0JBWWVCQUJEQUVFd0N3WURWUjBQQkFRREFnR0dNQThHQTFVZEV3RUIvd1FGCk1BTUJBZjh3SFFZRFZSME9CQllFRk5xNUhyME9mV3kzbWMvckxXUEZrMHpmSWhlck1CQUdDU3NHQVFRQmdqY1YKQVFRREFnRUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJkdHFVbDdvWFFTYWxIWjh6Y2dRZllvZWVxTGNwRQp5RjhFUngwdnFQc0hmY2VnL0ZXZEhFUVh4TWtPN1JER1Fzb2NmTVZvR0FBT1R3VlFPTHZCNmg4MnhCRVozSjBqCjBGMWkvcSs0WEd2NjdvOW43Z2NLNUFGOVNhcy9MVFB4N3dqQjV2dS85TkxyRkE1eXgyUG1iRnpNNFZRcXkwZnQKd2loaTdxMlhoQlVYUGo0SEdhTVE2aE1CYkRhSVl0Z0ovWWlkTFpSeGZWQVpGVEN4UDlPcDZVR3d0Zi9DeHdPSQo5ZkxtaWIwUDZCWG9sR3h1eU5XdHU2K0Vxc1JtMGtvcE5jcDkyZWpiOGsyb3R4VWdRcGNoVzRwd2RLMWZ3azhECndVblY5emhTc2k5eVZGMVVRUDZRcEJCeFNDZE5PT3JSSEg0N1djZmF0VUg0SWhuQW9PS0VyUVpBCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'

    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: plan-${{ inputs.environment }}.tfplan
        path: ${{ inputs.working_directory }}
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init ${{ inputs.terraform_backend_config }}
    
    # Run terraform destroy on push to main if 'destroy' is set to true
    - name: Terraform Destroy
      if: inputs.destroy == true
      id: destroy
      run: terraform destroy ${{ inputs.terraform_options }} -auto-approve

    - name: Run Terraform
      if: inputs.destroy == false
      run: |
        terraform apply -input=false plan-${{ inputs.environment }}.tfplan

  attest-deploy:
    if: inputs.image_url != '' && (inputs.environment == 'dev' || inputs.environment == 'test')
    name: Attest deploy to environment
    needs: run_terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: Get Image Digest URL from Image Tag URL
        id: image-digest-url
        run: |
          # If image_url = registry/repository@digest
          if [[ "${{inputs.image_url}}" == *"@"* ]] 
          then
            image_digest_url="${{ inputs.image_url }}"
          else
            # Convert registry/repository:tag to registry/repository@digest
            image_tag_url=${{ inputs.image_url }}
            digest=$(docker manifest inspect $image_tag_url -v | jq -r .Descriptor.digest)
            base_image_url=${image_tag_url%:*}
            image_digest_url="${base_image_url}@${digest}"
          fi
          echo "::set-output name=image_url::$image_digest_url"

      - name: Check if already attested
        id: get-attestation
        run: |
          attestation=$(gcloud container binauthz attestations list --project="${{ inputs.project_id }}" --attestor="projects/${{ inputs.project_id }}/attestors/Deploy-${{ inputs.environment }}" --artifact-url="${{ steps.image-digest-url.outputs.image_url }}")
          attestationoutput=$(printf '%s' $attestation | jq --raw-input --slurp '.' --join-output)
          echo "::set-output name=attestation::$attestationoutput"
      
      # Attestor name: Deploy-Dev
      - name: Perform attestation of deploy to ${{inputs.environment}}
        id: attest-deploy
        # Note: msg is an empty string when no attestation is done
        if: steps.get-attestation.outputs.attestation == ''
        run: |
          gcloud beta container binauthz attestations sign-and-create \
            --project="${{ inputs.project_id }}" \
            --artifact-url="${{ steps.image-digest-url.outputs.image_url }}" \
            --attestor="Deploy-${{ inputs.environment }}" \
            --attestor-project="${{ inputs.project_id }}" \
            --keyversion-project="${{ inputs.project_id }}" \
            --keyversion-location="europe-north1" \
            --keyversion-keyring="Attestor-Keyring" \
            --keyversion-key="Deploy-${{ inputs.environment }}-Key" \
            --keyversion="1"
          echo Attestation succeded
