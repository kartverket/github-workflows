name: TFSec

on:
  workflow_call:
    inputs:
      # The image reference generated by a build job.
      image_url:
        description: "Setting an image_url of the form registry/repository:tag or registry/repository@digest enables the binary attestation of that image."
        required: true
        type: string
      workload_identity_provider:
        description: "The ID of the provider to use for authentication. It should be in the format of `projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers/{{workload_identity_pool_provider_id}}`"
        required: true
        type: string
      service_account:
        description: "The GCP service account connected to the identity pool that will be used by Terraform"
        required: true
        type: string

jobs:
  tfsec:
    name: Run TFSec Code Scan and Attestation
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run tfsec
        id: tfsec
        uses: aquasecurity/tfsec-sarif-action@9a83b5c3524f825c020e356335855741fd02745f
        with:
          sarif_file: tfsec.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec.sarif

# trivy:
#   name: Trivy
#   runs-on: ubuntu-latest
#   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#   defaults:
#     run:
#       shell: bash
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Run Trivy vulnerability scanner
#       uses: aquasecurity/trivy-action@master
#       with:
#         image-ref: 'ghcr.io/kartverket/github-runner:master'
#         format: 'sarif'
#         output: 'trivy-results.sarif'
#         severity: 'CRITICAL,HIGH'
#         timeout: '15m'

#     - name: Upload Trivy scan results to GitHub Security tab
#       uses: github/codeql-action/upload-sarif@v2
#       with:
#         sarif_file: 'trivy-results.sarif'

  attest:
    name: Attest Github Security Code Scanning
    needs: tfsec
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check for Critical and High Severity
        run: |
          curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/kartverket/github-runner/code-scanning/alerts | jq -r '.[]|select(.rule.security_severity_level | startswith("high"))'

#     - name: Authenticate with Google Cloud
#       uses: google-github-actions/auth@v0
#       with:
#         workload_identity_provider: ${{ inputs.workload_identity_provider }}
#         service_account: ${{ inputs.service_account }}

#     - name: Get Image Digest URL from Image Tag URL
#       id: image-digest-url
#       run: |
#         # If image_url = registry/repository@digest
#         if [[ "${{ inputs.image_url}}" == *"@"* ]] 
#         then
#           msg="${{ inputs.image_url }}"
#         else
#           # Convert registry/repository:tag to registry/repository@digest
#           a=${{ inputs.image_url }}
#           mysha=$(docker manifest inspect $a -v | jq -r .Descriptor.digest)
#           b=${a%:*}
#           msg="${b}@${mysha}"
#         fi
#         echo "::set-output name=image_url::$msg"

#     - name: Check if already attested
#       id: get-attestation
#       run: |
#         mystr=$(gcloud container binauthz attestations list --project="kubernetes-dev-94b9" --attestor="projects/kubernetes-dev-94b9/attestors/Deploy-Trivy-Scan" --artifact-url="${{ steps.image-digest-url.outputs.image_url }}")
#         msg=$(printf '%s' "$mystr" | jq --raw-input --slurp '. | length' )
#         echo "::set-output name=msg::$msg"
#         echo "${{ steps.get-attestation.outputs.msg }}"

#     # https://cloud.google.com/binary-authorization/docs/making-attestations
#     # add --validate tag to validate that the Attestation can be verified by the provided Attestor.
#     # Attestor name: Trivy-Scan
#     - name: Perform attestation
#       # TODO: Come up with a better if check
#       if: steps.get-attestation.outputs.msg < 1000
#       run: |
#         gcloud beta container binauthz attestations sign-and-create \
#           --project="kubernetes-dev-94b9" \
#           --artifact-url="${{ steps.image-digest-url.outputs.image_url }}" \
#           --attestor="Trivy-Scan" \
#           --attestor-project="kubernetes-dev-94b9" \
#           --keyversion-project="kubernetes-dev-94b9" \
#           --keyversion-location="europe-north1" \
#           --keyversion-keyring="Attestor-Keyring" \
#           --keyversion-key="Trivy-Scan-Key" \
#           --keyversion="1"
#         echo Attestation succeded

# tfsec-pr-comments:
#   name: tfsec PR commenter
#   runs-on: ubuntu-latest
#   needs: tfsec
#   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#   defaults:
#     run:
#       shell: bash

#   steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: tfsec
#       uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}
#         github_event_path: ${{ secrets.GITHUB_EVENT_PATH }}
